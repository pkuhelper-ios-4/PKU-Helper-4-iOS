//
//  Array+Extension.swift
//  PKUHelper-4
//
//  Created by zxh on 2019/8/16.
//  Copyright Â© 2019 PKUHelper. All rights reserved.
//

import Foundation
import GameplayKit


// MARK: - Methods
public extension Array {

    /// SwifterSwift: Insert an element at the beginning of array.
    ///
    ///        [2, 3, 4, 5].prepend(1) -> [1, 2, 3, 4, 5]
    ///        ["e", "l", "l", "o"].prepend("h") -> ["h", "e", "l", "l", "o"]
    ///
    /// - Parameter newElement: element to insert.
    mutating func prepend(_ newElement: Element) {
        insert(newElement, at: 0)
    }

    /// SwifterSwift: Safely swap values at given index positions.
    ///
    ///        [1, 2, 3, 4, 5].safeSwap(from: 3, to: 0) -> [4, 2, 3, 1, 5]
    ///        ["h", "e", "l", "l", "o"].safeSwap(from: 1, to: 0) -> ["e", "h", "l", "l", "o"]
    ///
    /// - Parameters:
    ///   - index: index of first element.
    ///   - otherIndex: index of other element.
    mutating func safeSwap(from index: Index, to otherIndex: Index) {
        guard index != otherIndex else { return }
        guard startIndex..<endIndex ~= index else { return }
        guard startIndex..<endIndex ~= otherIndex else { return }
        swapAt(index, otherIndex)
    }
}

// MARK: - Methods (Equatable)
public extension Array where Element: Equatable {

    /// SwifterSwift: Remove all instances of an item from array.
    ///
    ///        [1, 2, 2, 3, 4, 5].removeAll(2) -> [1, 3, 4, 5]
    ///        ["h", "e", "l", "l", "o"].removeAll("l") -> ["h", "e", "o"]
    ///
    /// - Parameter item: item to remove.
    /// - Returns: self after removing all instances of item.
    @discardableResult
    mutating func removeAll(_ item: Element) -> [Element] {
        removeAll(where: { $0 == item })
        return self
    }

    /// SwifterSwift: Remove all instances contained in items parameter from array.
    ///
    ///        [1, 2, 2, 3, 4, 5].removeAll([2,5]) -> [1, 3, 4]
    ///        ["h", "e", "l", "l", "o"].removeAll(["l", "h"]) -> ["e", "o"]
    ///
    /// - Parameter items: items to remove.
    /// - Returns: self after removing all instances of all items in given array.
    @discardableResult
    mutating func removeAll(_ items: [Element]) -> [Element] {
        guard !items.isEmpty else { return self }
        removeAll(where: { items.contains($0) })
        return self
    }

    /// SwifterSwift: Remove all duplicate elements from Array.
    ///
    ///        [1, 2, 2, 3, 4, 5].removeDuplicates() -> [1, 2, 3, 4, 5]
    ///        ["h", "e", "l", "l", "o"]. removeDuplicates() -> ["h", "e", "l", "o"]
    ///
    /// - Returns: Return array with all duplicate elements removed.
    @discardableResult
    mutating func removeDuplicates() -> [Element] {
        // Thanks to https://github.com/sairamkotha for improving the method
        self = reduce(into: [Element]()) {
            if !$0.contains($1) {
                $0.append($1)
            }
        }
        return self
    }
}

public extension Array where Element: NSCopying {

    public func copy() -> [Element] {
        return self.map { $0.copy(with: nil) as! Element }
    }
}

public extension Array {

    public mutating func mutableForEach(_ body: (inout Element) throws -> Void) rethrows {
        for (index, var element) in enumerated() {
            try body(&element)
            self[index] = element
        }
    }

    ///
    /// https://stackoverflow.com/questions/40580545/how-to-initialize-an-array-using-repeatingcount-with-distinct-objects
    ///
    /// Create a new Array whose values are generated by the given closure.
    /// - Parameters:
    ///     - count:     The number of elements to generate
    ///     - generator: The closure that generates the elements.
    ///                  The index into which the element will be inserted is passed into the closure.
    public init(generator: (Int) -> Element, count: Int) {
        self = (0..<count).map(generator)
    }

    public func shuffled(seed: UInt64) -> [Element] {
        let lcg = GKLinearCongruentialRandomSource(seed: seed)
        return lcg.arrayByShufflingObjects(in: self) as! [Element]
    }
}

